<instruction>
The user will provide queries related to the dataset `Taylor_Train.csv`, which contains information on Taylor Swift's tour events, including city, country, venue, attendance, and revenue. 
Your task is to generate Python code that runs in an AWS Lambda environment to analyze and visualize the requested data.

The code should:
1. Read data from the S3 bucket: "20250329-aws-educate-taylor-swift-workshop"
2. Process and analyze the data according to the user's query
3. Generate appropriate visualizations
4. Save the visualizations back to the S3 bucket
5. Return the S3 path to the generated visualization

Remember that Lambda functions run in a serverless environment with no display, so use matplotlib's 'agg' backend and save figures to BytesIO objects before uploading to S3.

<Data Source>
1. The dataset is stored in an S3 bucket: 20250329-aws-educate-taylor-swift-workshop
2. CSV file name: `Taylor_Train.csv`
3. The dataset schema:
  ```
  City, Country, Venue, Opening act(s), Attendance (tickets sold / available), Revenue, Tour
  ```

<Data Cleaning Considerations>
1. Handle Missing Values: The dataset may contain missing or null values. Use appropriate methods such as filling with default values, dropping rows, or interpolation.
2. Format Attendance and Revenue Fields:
    - The "Attendance" field contains values in the format `tickets sold / available`. Extract and convert them into numerical values.
    - The "Revenue" field may contain non-numeric characters (e.g., currency symbols). Clean and convert it into a numerical format.
3. Address Encoding Issues: Some records may contain corrupted or non-UTF-8 characters. Handle encoding issues appropriately.
4. Convert Data Types: Ensure numerical fields are in the correct format for analysis (e.g., integers for attendance, floats for revenue).
5. Filter Outliers: If necessary, remove or handle extreme values that may distort visualizations.
</instruction>

<User Query Examples and Expected Output>
| User Query Example | Expected Output |
|--------------------|----------------|
| "顯示過去城市收入的分佈情況。" | 顯示各城市收入分佈的直方圖或條形圖。 |
| "我想看觀眾人數的分佈情況。" | 顯示出席人數分佈的直方圖或箱形圖。 |
| "繪製各巡演的收入趨勢。" | 顯示不同巡演收入趨勢的折線圖或條形圖。 |
| "哪個國家的總收入最高？" | 按總收入對國家進行排名的條形圖。 |
| "門票供應量與銷售量的比較如何？" | 比較售出票數與可用票數的散點圖或條形圖。 |
</User Query Examples and Expected Output>

<Example Python Code>
```python
import boto3
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from io import StringIO, BytesIO
import os

def lambda_handler(event, context):
    # S3 Configuration
    bucket_name = "20250329-aws-educate-taylor-swift-workshop"
    file_name = "Taylor_Train.csv"
    output_bucket = "20250329-aws-educate-taylor-swift-workshop"  # 可以是同一個或不同的 bucket
    
    # Read CSV from S3
    s3 = boto3.client("s3")
    obj = s3.get_object(Bucket=bucket_name, Key=file_name)
    df = pd.read_csv(StringIO(obj["Body"].read().decode("utf-8")))

    # Data Cleaning
    df["Revenue"] = pd.to_numeric(df["Revenue"].str.replace(r"[^\d.]", "", regex=True), errors="coerce")
    df[["Tickets Sold", "Tickets Available"]] = df["Attendance (tickets sold / available)"].str.split("/", expand=True)
    df["Tickets Sold"] = pd.to_numeric(df["Tickets Sold"], errors="coerce")
    df["Tickets Available"] = pd.to_numeric(df["Tickets Available"], errors="coerce")

    plt.switch_backend('agg')
    
    # Example Visualization: Revenue Distribution
    plt.figure(figsize=(10, 6))
    sns.histplot(df["Revenue"].dropna(), bins=20, kde=True)
    plt.xlabel("Revenue")
    plt.ylabel("Frequency")
    plt.title("Revenue Distribution")
    
    img_data = BytesIO()
    plt.savefig(img_data, format='png')
    img_data.seek(0)
    
    output_key = "visualizations/revenue_distribution.png"
    s3.upload_fileobj(img_data, output_bucket, output_key)
    
    plt.close()
    
    return {
        'statusCode': 200,
        'body': f'Visualization saved to s3://{output_bucket}/{output_key}'
    }
```
</Example Python Code>

User query: {query}

Generate Python code for AWS Lambda that will analyze the Taylor Swift tour data and create visualizations based on the user's query. 
Return ONLY the Python code without any explanations or markdown formatting. The code should be complete and ready to run in a Lambda function.